// Code generated by MockGen. DO NOT EDIT.
// Source: room_service.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/isso-719/gaya-on-server/pkg/domain/model"
)

// MockIFRoomService is a mock of IFRoomService interface.
type MockIFRoomService struct {
	ctrl     *gomock.Controller
	recorder *MockIFRoomServiceMockRecorder
}

// MockIFRoomServiceMockRecorder is the mock recorder for MockIFRoomService.
type MockIFRoomServiceMockRecorder struct {
	mock *MockIFRoomService
}

// NewMockIFRoomService creates a new mock instance.
func NewMockIFRoomService(ctrl *gomock.Controller) *MockIFRoomService {
	mock := &MockIFRoomService{ctrl: ctrl}
	mock.recorder = &MockIFRoomServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFRoomService) EXPECT() *MockIFRoomServiceMockRecorder {
	return m.recorder
}

// CreateRoom mocks base method.
func (m *MockIFRoomService) CreateRoom(ctx context.Context, token string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", ctx, token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockIFRoomServiceMockRecorder) CreateRoom(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockIFRoomService)(nil).CreateRoom), ctx, token)
}

// FindRoom mocks base method.
func (m *MockIFRoomService) FindRoom(ctx context.Context, token string) (*model.Room, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoom", ctx, token)
	ret0, _ := ret[0].(*model.Room)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindRoom indicates an expected call of FindRoom.
func (mr *MockIFRoomServiceMockRecorder) FindRoom(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoom", reflect.TypeOf((*MockIFRoomService)(nil).FindRoom), ctx, token)
}

// Migrate mocks base method.
func (m *MockIFRoomService) Migrate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Migrate indicates an expected call of Migrate.
func (mr *MockIFRoomServiceMockRecorder) Migrate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockIFRoomService)(nil).Migrate))
}
